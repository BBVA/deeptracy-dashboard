import { AfterViewInit, Component, OnDestroy } from '@angular/core';
import { NbThemeService } from '@nebular/theme';
import { ScanService } from '../../../../@core/data/scan.service';

declare const echarts: any;

@Component({
  selector: 'vulnerability-chart',
  styleUrls: ['./vulnerability-chart.component.scss'],
  template: `
    <div echarts [options]="option" class="echart" (chartInit)="onChartInit($event)"></div>
  `,
})
export class VulnerabilityChartComponent implements AfterViewInit, OnDestroy {

  chart: any;
  data: Array<any> = [];
  loading: boolean;
  option: any;
  theme: any;
  themeSubscription: any;

  constructor(private themeService: NbThemeService, public scanService: ScanService) {

    this.loading = false;
    const projectId = 'a793277adcd1459091d85bada152737a'; // TODO: remove hardcoded projectId
    this.scanProject(projectId);
  }

  onChartInit(chart) {
    this.chart = chart;
  }

  refreshChart() {
    /*
    this.option.xAxis.data = this.data.map(i => i.label);
    this.option.series[0].data = this.data.map(i => i.value);
    this.option.series[1].data = this.data.map(i => i.value);
    this.chart.resize();

    /*
    this.chart.setOption({
      xAsis: {
        data: this.data.map(i => i.label)
      },
      series: [
        {
          type: 'bar',
          data: this.data.map(i => i.value)
        },
        {
          type: 'line',
          data: this.data.map(i => i.value)
        }
      ]
    });
    */


    this.option = {
      grid: {
        left: 0,
        top: 0,
        right: 0,
        bottom: 80,
      },
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'line',
          lineStyle: {
            color: this.theme.tooltipLineColor,
            width: this.theme.tooltipLineWidth,
          },
        },
        textStyle: {
          color: this.theme.tooltipTextColor,
          fontSize: 20,
          fontWeight: this.theme.tooltipFontWeight,
        },
        position: 'top',
        backgroundColor: this.theme.tooltipBg,
        borderColor: this.theme.tooltipBorderColor,
        borderWidth: 3,
        formatter: '{c0} vulnerabilities on {c1}',
        extraCssText: this.theme.tooltipExtraCss,
      },
      xAxis: {
        type: 'category',
        boundaryGap: false,
        offset: 25,
        data: this.data.map(i => i.label),
        axisTick: {
          show: true,
        },
        axisLabel: {
          textStyle: {
            color: this.theme.xAxisTextColor,
            fontSize: 18,
          },
        },
        axisLine: {
          lineStyle: {
            color: this.theme.axisLineColor,
            width: '2',
          },
        },
      },
      yAxis: {
        boundaryGap: [0, '5%'],
        axisLine: {
          show: false,
        },
        axisLabel: {
          show: false,
        },
        axisTick: {
          show: false,
        },
        splitLine: {
          show: true,
          lineStyle: {
            color: this.theme.yAxisSplitLine,
            width: '1',
          },
        },
      },
      series: [
        {
          type: 'bar',
          smooth: true,
          symbolSize: 20,
          itemStyle: {
            normal: {
              opacity: 1,
              color: '#FFFFFF11',
            },
            emphasis: {
              color: '#FFFFFF44',
              borderColor: '#FFFFFF00',
              borderWidth: 2,
              opacity: 1,
            },
          },
          lineStyle: {
            normal: {
              width: this.theme.lineWidth,
              type: this.theme.lineStyle,
              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                offset: 0,
                color: this.theme.lineGradFrom,
              }, {
                offset: 1,
                color: this.theme.lineGradTo,
              }]),
              shadowColor: this.theme.lineShadow,
              shadowBlur: 6,
              shadowOffsetY: 12,
            },
          },
          areaStyle: {
            normal: {
              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                offset: 0,
                color: this.theme.areaGradFrom,
              }, {
                offset: 1,
                color: this.theme.areaGradTo,
              }]),
            },
          },
          data: this.data.map(i => i.value),
        },

        {
          type: 'line',
          smooth: true,
          symbol: 'none',
          lineStyle: {
            normal: {
              width: this.theme.lineWidth,
              type: this.theme.lineStyle,
              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                offset: 0,
                color: this.theme.lineGradFrom,
              }, {
                offset: 1,
                color: this.theme.lineGradTo,
              }]),
              shadowColor: this.theme.shadowLineDarkBg,
              shadowBlur: 14,
              opacity: 1,
            },
          },
          data: this.data.map(i => i.value),
        },
      ],
    };
  }

  scanProject(projectId: string): void {
    this.loading = true;
    this.scanService.getScansByProjectId(projectId)
      .subscribe(
        scans => {
          this.loading = false;
          this.data = scans.map((scan, index) => ({
            label: scan.date,
            value: scan.count,
          }));

          this.refreshChart()
        }
      );
  }

  ngAfterViewInit(): void {
    this.themeService.getJsTheme().delay(1).subscribe(config => {
      this.theme = config.variables.vulnerability;
    });
  }

  ngOnDestroy() {
    this.themeSubscription.unsubscribe();
  }
}
